#!/usr/bin/ruby
 
require 'mcollective'

include MCollective::RPC


options = rpcoptions do |parser, options|
  parser.define_head "f-taglist"
  parser.banner = "Usage: f-taglist [options] [filters] --repo REPO"
 
  parser.on('-r', '--repo REPO', 'Repo to mangle') do |v|
    options[:repo] = v
  end

  parser.on('-n','--num NUM', 'Number of revisions to report') do |v|
    options[:count] = v.to_i
  end
end
 
unless options.include?(:repo)
  puts("You need to specify a repo with --repo")
  exit! 1
end

unless options.include?(:count)
  options[:count] = 0
end
 
mc = rpcclient("gitagent", :options => options)

#printrpc mc.git_tag(:repo => options[:repo], :count => options[:count])
#
nodelist = mc.discover

#puts nodelist.inspect
nodec = nodelist.count
tags = Hash.new(0)
branches = Hash.new(0)
meng = Hash.new{ |h,k| h[k] = Hash.new(&h.default_proc) }

nodelist.each do |node|
  mc.custom_request("git_tag",{:repo => options[:repo],:count => options[:count]}, "#{node}", {"identity" => "#{node}"}) do |spog|
    begin
      blep = spog[:body]
      flem = blep[:data]
      machine = spog[:senderid]
    rescue Exception => e
      puts "The agent returned an error: #{e}"
    end
    taglist = flem[:tout].split(/\n/)
    branchlist = flem[:bout].split(/\n/)
    
    meng[machine]['tags'] = taglist
    meng[machine]['branches'] = branchlist
  end
end

meng.each do |mnode, git|
  git['tags'].each do |tag|
    tags[tag] = tags[tag] +1
  end
  git['branches'].each do |branch|
    branches[branch] = branches[branch] + 1
  end
end

tl = "Repo #{options[:repo]} on #{nodelist.inspect} contains:"

puts tl

puts "Tags:"
tags.each do |tag,ct|
  pob = "#{tag}"
  pob << ' *' if ct != nodec
  puts pob
end

puts "Branches:"
branches.each do |branch,ct|
  pob = "#{branch}"
  pob << ' *' if ct != nodec
  puts pob
end

#printrpcstats

mc.disconnect
